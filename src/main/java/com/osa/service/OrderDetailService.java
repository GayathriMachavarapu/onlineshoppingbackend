package com.osa.service;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PathVariable;

import com.osa.configuration.JwtRequestFilter;
import com.osa.dao.CartRepository;
import com.osa.dao.OrderDetailRepository;
import com.osa.dao.ProductRepository;
import com.osa.dao.UserRepository;
import com.osa.entity.Cart;
import com.osa.entity.OrderDetail;
import com.osa.entity.OrderInput;
import com.osa.entity.OrderProductQuantity;
import com.osa.entity.Product;
import com.osa.entity.TransactionDetails;
import com.osa.entity.User;
import com.razorpay.Order;
import com.razorpay.RazorpayClient;
import com.razorpay.RazorpayException;

@Service
public class OrderDetailService {
	@Autowired
	private OrderDetailRepository orderDetailRepository;
	@Autowired
	private ProductRepository productRepository;
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private CartRepository cartRepository;
	
	private static  final String ORDER_PLACED="placed"; 
	
	private static final String KEY="rzp_test_ML9fcLA5nO1pp5";
	private static final String KEY_SECRET="Nuxib2hU3L0nfgMDnMqWObTp";
	private static final String CURRENCY="INR";
	
	
	
	public void placeOrder(OrderInput orderInput,boolean isSingleProductCheckout) {
	List<OrderProductQuantity> productQuantityList =orderInput.getOrderProductQuantityList();
	for(OrderProductQuantity o:productQuantityList) {
		Product product=productRepository.findById(o.getProductId()).get();
		
		String currentUser=JwtRequestFilter.CURRENT_USER;
		User user=userRepository.findById(currentUser).get();
		OrderDetail orderDetail=new OrderDetail(orderInput.getFullName(),
				orderInput.getFullAddress(),
				orderInput.getContactNumber(),
				orderInput.getAlternateContactNumber(),
				ORDER_PLACED,
				product.getProductDiscountedprice()*o.getQuantity(),
				product,
				user,
				orderInput.getTransactionId()
				
				);
		
		//empty the cart
		if(!isSingleProductCheckout) {
			List<Cart> carts=cartRepository.findByUser(user);
			carts.stream().forEach(x->cartRepository.deleteById(x.getCartId()));
		}
		orderDetailRepository.save(orderDetail);
		
	}
		
	}
	
	
	public List<OrderDetail> getOrderDetails() {
		String userName=JwtRequestFilter.CURRENT_USER;
		User user =userRepository.findById(userName).get();
		return orderDetailRepository.findByUser(user);
	}
	
	public List<OrderDetail> getAllOrderDetails(String status) {
		List<OrderDetail> orderDeatils=new ArrayList<>();
		if(status.equals("All")) {
			 orderDetailRepository.findAll().forEach(x->orderDeatils.add(x));
			
		}
		else {
			orderDetailRepository.findByOrderStatus(status).forEach((X)->orderDeatils.add(X));
		}
		
		
		 
		 return orderDeatils;
	}
	
	public void markOrderAsDelivered( int orderId) {
	OrderDetail orderDetail=orderDetailRepository.findById(orderId).get();
	if(orderDetail!=null) {
		orderDetail.setOrderStatus("Delivered");
		orderDetailRepository.save(orderDetail);
	}
		
	}
	
	public TransactionDetails createTransaction(double amount) {
		//amount
		//currency
		//key(_from razor pay)
		//secretkey(generated by razorpay)
		try {
			JSONObject jsonObject=new JSONObject();
			jsonObject.put("amount", (amount*100));
			jsonObject.put("currency", CURRENCY);
			
			RazorpayClient razorpayClient=new RazorpayClient(KEY, KEY_SECRET);
			Order order= razorpayClient.orders.create(jsonObject);
	        return prepareTransactionDetails(order);
		} catch (RazorpayException e) {
			
			e.printStackTrace();
		}
		return null;
	}
	
public TransactionDetails prepareTransactionDetails(Order order) {
	String orderId=order.get("id");
	String currency=order.get("currency");
	int amount=order.get("amount");
	
	TransactionDetails transactionDetails=new TransactionDetails(orderId,currency,amount,KEY);
	return transactionDetails;
		
	}

}
